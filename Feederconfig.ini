# For Prime
# commented sections are optional and have builtin defaults correct for the board type, but can be overidden

[general]
grbl_mode = false
config-override = false

[system]
#flash_on_boot = true   # set to true (default) to flash the flashme.bin file if it exists on boot
#msc_enable = true      # set to true (default) for MSC to be available
#dfu_enable = false     # set to true to enable dfu for developers disabled by default

[consoles]
second_usb_serial_enable = false     # set to true to enable a second USB serial console

[uart console]
enable = true
channel = 1
baudrate = 115200
bits = 8
stop_bits = 1
parity = none

[motion control]
default_feed_rate = 4000 # Default speed (mm/minute) for G1/G2/G3 moves
default_seek_rate = 4000 # Default speed (mm/minute) for G0 moves
#mm_per_line_segment = 1  # segmentation if using grid compensation
#delta_segments_per_second = 100 # segmentation for deltas
mm_per_arc_segment = 0.0 # Fixed length for line segments that divide arcs, 0 to disable
mm_max_arc_error = 0.01 # The maximum error for line segments that divide arcs 0 to disable
arc_correction = 5
default_acceleration = 1000.0 # default acceleration in mm/sec²
arm_solution = cartesian
x_axis_max_speed = 30000 # Maximum speed in mm/min
y_axis_max_speed = 30000 # Maximum speed in mm/min
z_axis_max_speed = 1800  # Maximum speed in mm/min
compliant_seek_rate = false # if true G0 is always at default_seek_rate and Fxxx applies to G1 only

#max_speed = 0           # Overall Maximum speed in mm/min (0 disables it)
#save_g92 = false       # set to true to save G92 with M500
#save_wcs = false       # set to true to save WCS (G54 etc) with M500

[planner]
junction_deviation = 0.05
#z_junction_deviation = 0.0
minimum_planner_speed = 0
planner_queue_size = 32

[actuator]
alpha.steps_per_mm = 100       # Steps per mm for alpha ( X ) stepper
alpha.max_rate = 30000         # Maximum rate in mm/min
alpha.microsteps = 32          # sets micro stepping (default 32)

beta.steps_per_mm = 100        # Steps per mm for beta ( Y ) stepper
beta.max_rate = 30000          # Maxmimum rate in mm/min
beta.microsteps = 32           # sets micro stepping (default 32)

gamma.steps_per_mm = 400    # Steps per mm for gamma ( Z ) stepper
gamma.max_rate = 1800       # Maximum rate in mm/min
gamma.acceleration = 500    # overrides the default acceleration for this axis
gamma.microsteps = 32       # sets micro stepping (default 32)

# Delta is first extruder, we set common stuff here instead of in extruder section
delta.steps_per_mm = 700       # Steps per mm for extruder stepper
delta.acceleration = 500       # Acceleration for the stepper motor mm/sec²
delta.max_rate = 3000.0        # Maximum rate in mm/min
delta.microsteps = 32          # sets micro stepping (default 32)

common.check_driver_errors = true     # set to true means the driver (tmc2660) error bits are checked
common.halt_on_driver_alarm = false   # if set to true means ON_HALT is entered on any error bits being set

[tmc2590]
# settings specific to each tmc2590 driver instance
alpha.step_interpolation = true # set to true to turn on the step interpolation
beta.step_interpolation = true  # set to true to turn on the step interpolation
gamma.step_interpolation = true # set to true to turn on the step interpolation
delta.step_interpolation = false # set to true to turn on the step interpolation

[tmc2660]
# settings specific to each tmc2660 driver instance
alpha.step_interpolation = true # set to true to turn on the step interpolation
beta.step_interpolation = true  # set to true to turn on the step interpolation
gamma.step_interpolation = true # set to true to turn on the step interpolation
delta.step_interpolation = false # set to true to turn on the step interpolation

[current control]
alpha.current  = 0.0    # X stepper motor current
beta.current   = 0.0    # Y stepper motor current
gamma.current  = 0.0    # Z stepper motor current
delta.current  = 0.0    # First extruder stepper motor current

[switch]
msc_but.enable             = true                    # MSC button on board
msc_but.input_pin          = PJ14                    # button
msc_but.output_on_command  = msc                     # command to send
msc_but.input_pin_behavior = momentary
#fan.enable = false # Enable this module
#fan.input_on_command = M106 # Command that will turn this switch on
#fan.input_off_command = M107 # Command that will turn this switch off
#fan.output_pin = PE1         # Pin this module controls
#fan.output_type = sigmadeltapwm # PWM output settable with S parameter in the input_on_comand

#fan2.enable = false # Enable this module
#fan2.input_on_command = M106 # Command that will turn this switch on
#fan2.input_off_command = M107 # Command that will turn this switch off
#fan2.subcode = 1
#fan2.output_pin = PI11           # Pin this module controls
#fan2.output_type = sigmadeltapwm # PWM output settable with S parameter in the input_on_comand

#psu.enable = false             # Enable this module
#psu.input_on_command = M80    # Command that will turn this switch on
#psu.input_off_command = M81   # Command that will turn this switch off
#psu.output_pin = PI4!         # Pin this module controls SSR1
#psu.output_type = digital     # Digital means this is just an on or off pin

#aux.enable = false             # Enable this module
#aux.input_on_command = M80    # Command that will turn this switch on
#aux.input_off_command = M81   # Command that will turn this switch off
#aux.subcode = 1
#aux.output_pin = PB7!         # Pin this module controls SSR2
#aux.output_type = digital     # Digital means this is just an on or off pin

[temperature control]
# board temperature, no controller, readonly
board.enable = true                # Whether to activate this module at all.
board.beta = 4390

[button box]
feeder0.pin    = PD14                  # button    
feeder0.press  = echo -1 M700N0        # command to send
 
feeder1.pin    = PD12                  # button
feeder1.press  = echo -1 M700N1        # command to send
 
feeder2.pin    = PD10                 # button
feeder2.press  = echo -1 M700N2        # command to send
 
feeder3.pin    = PI5                  # button
feeder3.press  = echo -1 M701N3        # command to send
 
feeder4.pin    = PI6                   # button
feeder4.press  = echo -1 M701N4        # command to send
 
feeder5.pin    = PI7                  # button
feeder5.press  = echo -1 M701N5        # command to send
 
feeder6.pin    = PI2                   # button           
feeder6.press  = echo -1 M701N6        # command to send
 
feeder7.pin    = PE11                   # button        
feeder7.press  = echo -1 M701N7        # command to send
 
feeder8.pin    = PE13                   # button
feeder8.press  = echo -1 M701N8        # command to send
 
feeder9.pin    = PE14                  # button      
feeder9.press  = echo -1 M701N9        # command to send
 
feeder10.pin    = PJ7                 # button
feeder10.press  = echo -1 M701N10        # command to send
 
feeder11.pin    = PJ8                   # button
feeder11.press  = echo -1 M701N11        # command to send
 
feeder12.pin    = PD15                   # button    
feeder12.press  = echo -1 M701N12        # command to send
 
feeder13.pin    = PB5                   # button
feeder13.press  = echo -1 M701N13        # command to send
 
feeder14.pin    = PA6                   # button
feeder14.press  = echo -1 M701N14        # command to send
 
feeder15.pin    = PJ4                   # button
feeder15.press  = echo -1 M701N15        # command to send
 
feeder16.pin    = PG0                  # button
feeder16.press  = echo -1 M701N16        # command to send
 
feeder17.pin    = PJ3                   # button
feeder17.press  = echo -1 M701N17        # command to send
 
feeder18.pin    = PJ2                   # button
feeder18.press  = echo -1 M701N18        # command to send
 
feeder19.pin    = PH2                  # button              
feeder19.press  = echo -1 M701N19        # command to send
 
feeder20.pin    = PH4                   # button             
feeder20.press  = echo -1 M701N20        # command to send
 
feeder21.pin    = PC0                   # button
feeder21.press  = echo -1 M701N21        # command to send
 
feeder22.pin    = PF15                   # button
feeder22.press  = echo -1 M701N22        # command to send
 
feeder23.pin    = PH3                 # button
feeder23.press  = echo -1 M701N23        # command to send
 
feeder24.pin    = PF2                  # button
feeder24.press  = echo -1 M701N24        # command to send
 
feeder25.pin    = PI10                   # button
feeder25.press  = echo -1 M701N25        # command to send
 
feeder26.pin    = PH7                   # button
feeder26.press  = echo -1 M701N26        # command to send
 
feeder27.pin    = PB12                   # button
feeder27.press  = echo -1 M701N27        # command to send
 
feeder28.pin    = PI8                   # button
feeder28.press  = echo -1 M701N28        # command to send
 
feeder29.pin    = PE4                   # button
feeder29.press  = echo -1 M701N29        # command to send
 

[kill button]
enable = false         # Set to true to enable a kill button
pin = PJ6              # Kill button pin. on GA p3 (expects 0 to trigger)
toggle_enable = false  # set to true to make it a toggle button (like an estop)
unkill_enable = true   # enable kill button hold for 2 seconds does unkill

[pwm1]
frequency=10000        # PWM1 frequency 10KHz
[pwm2]
frequency=50           # PWM2 frequency 50 Hz



[endstops]
common.debounce_ms = 0         # debounce time in ms (actually 10ms min)
#common.is_delta = true
#common.homing_order = XYZ     # order in which axis homes (if defined)

minx.enable = true             # enable an endstop
minx.pin = PD0^                # pin
minx.homing_direction = home_to_min      # direction it moves to the endstop
minx.homing_position = 0                # the cartesian coordinate this is set to when it homes
minx.axis = X                # the axis designator
minx.max_travel = 500              # the maximum travel in mm before it times out
minx.fast_rate = 30               # fast homing rate in mm/sec
minx.slow_rate = 5               # slow homing rate in mm/sec
minx.retract = 5                # bounce off endstop in mm
minx.limit_enable = true        # enable hard limit

miny.enable = true                  # enable an endstop
miny.pin = PI1^                     # pin
miny.homing_direction = home_to_min # direction it moves to the endstop
miny.homing_position = 0            # the cartesian coordinate this is set to when it homes
miny.axis = Y                       # the axis designator
miny.max_travel = 500               # the maximum travel in mm before it times out
miny.fast_rate = 30                 # fast homing rate in mm/sec
miny.slow_rate = 5                  # slow homing rate in mm/sec
miny.retract = 5                    # bounce off endstop in mm
miny.limit_enable = true            # enable hard limits

minz.enable = true                  # enable an endstop
minz.pin = PI0^                     # pin
minz.homing_direction = home_to_min # direction it moves to the endstop
minz.homing_position = 0            # the cartesian coordinate this is set to when it homes
minz.axis = Z                       # the axis designator
minz.max_travel = 500               # the maximum travel in mm before it times out
minz.fast_rate = 30                 # fast homing rate in mm/sec
minz.slow_rate = 5                  # slow homing rate in mm/sec
minz.retract = 5                    # bounce off endstop in mm
minz.limit_enable = true            # enable hard limits

# enable limits only
#maxx.enable = false
#maxx.pin = PI3^
#maxx.axis = X
#maxx.homing_direction = home_to_max # if endstop
#maxx.limit_enable = true
#maxy.enable = false
#maxy.pin = PA9^
#maxy.axis = Y
#maxz.enable = false
#maxz.pin = PH15^
#maxz.axis = Z

[zprobe]
enable = false              # Set to true to enable a zprobe
probe_pin = PB10^           # Pin probe is attached to, if Normally open (ground for contact) add !
slow_feedrate = 5           # Mm/sec probe feed rate
fast_feedrate = 100         # Move feedrate mm/sec
probe_height = 5            # How much above bed to start probe
max_travel = 200            # maximum z travel before it gives up
#leveling = three point      # leveling strategy to use
#leveling = delta grid      # leveling strategy to use
#leveling = cartesian grid  # leveling strategy to use
#calibration = delta        # calibration strategy to use



[network]
enable = false
shell_enable = true
ftp_enable = true
webserver_enable = true
ntp_enable = true              # if true will set the RTC clock from a NTP server on boot
hostname = smoothiev2          # set hostname for device
ip_address = auto              # uses dhcp to get ip address (default)
#ip_address = 192.168.1.101    # OR set these
#ip_gateway = 192.168.1.1
#ip_mask = 255.255.255.0
#dns_server = 192.168.1.1      # set a dns server if not using DHCP (not needed unless using wget or update)
#ntp_server = pool.ntp.org     # best ntp server nearest you (default shown)
timezone = 0                   # timezone +/- hours from GMT (including DST if applicable)
